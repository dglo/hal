domapp-test is code necessary for the testing the
"real" data taking fpga code...

there is a test app that runs on the dom
(real-app) and a test program that runs on
the dor side (real-test).

real-app:  mimics domapp -- except that it
is instrumented for testing.  tests one feature
of the real-fpga at a time, fully...

real-test:  mimics domhubapp -- except that it
is instrumented for testing.  tests one feature
of the real-fpga at a fully.  also, it is capable
of dealing with multiple doms so that real tcal
testing can be done...

messages:

from dor:

MONI\n : request monitoring record
DATA\n : request data record(s)
CONF name=value ...\n : configuration message
  trigger=spe|mpe|forced|fe_pulser|led|flasher|fe_r2r|atwd_r2r|lc_up|lc_down|\
none
  daq_mode=atwd_fadc,fadc,ts
  atwd_enable=A|B|none
  atwd_mode=normal,testing,debugging
  lc_mode=off,soft,hard,flabby
  lbm_mode=wrap,stop
  compression_mode=off,on,both
  lc_enable=send_up|send_down|rcv_up|rcv_down
  lc_span=1..8
  lc_disc=spe,mpe
  lc_length_up=span','ns
  lc_length_down=span','ns
  lc_window=pre','post
  dac=NAME,val
  cal_enable=none,forced,fe_pulser,led,flasher,fe_r2r,atwd_r2r
  cal_mode=off,repeat,match,forced
  cal_atwd_offset=[int]
  cal_pulser_rate=[double]
  sn_mode=off|spe|mpe
  sn_dead_time=[int (ns)]
  rate_dead_time=[int (ns)]
  rate_enable=spe,mpe,none
  hv=on|off
  base_dac=[int (counts)]

ECHO\n: go into echo mode (no return)
VERS\n: request version information
REBT\n: reboot dom
PULS clock1 clock2 ...\n: schedule fe pulser
SNEV\n: request supernova events...
DUMP\n: dump dom registers

from dom:

MONI name=value ... \n : monitoring data
DATA n\n[n bytes data]: n bytes of data follows
CONF name=value ... \n : configuration reply
VERS name=value ...\n: return version info
ECHO\n: now in echo mode
EXCP msg\n : exception with message

